{{ define "object/builder" }}
{{- $builderName := .BuilderName}}
{{ if .GenerateMethod "builder.struct" }}
type {{ $builderName }} struct {
  mu sync.Mutex
  err error
  once sync.Once
  object *{{ .Name }}
}
{{ end }}

{{- if hasTemplate "ext/builder/header" }}
  {{- runTemplate "ext/builder/header" $ }}
{{- end }}

// New{{ $builderName }} creates a new {{ $builderName }} instance.
// {{ $builderName }} is safe to be used uninitialized as well.
func New{{ $builderName }}() *{{ $builderName }} {
  return &{{ $builderName }}{}
}

func (b *{{ $builderName }}) initialize() {
  b.err = nil
  b.object = &{{ .Name }}{}
  {{- if hasTemplate "ext/builder/initialize" }}
    {{- runTemplate "ext/builder/initialize" $ }}
  {{- end }}
}

{{- range $i, $field := .Fields }}
{{- $type := $field.GetType }}
{{- if $field.GetIsExtension }}{{ continue }}{{ end }}
{{- if (not ($field.GetName | printf "builder.method.%s" | $.GenerateMethod)) }}{{ continue }}{{ end }}
func (b *{{ $builderName }}) {{ $field.GetName }}(in {{ if $type.SliceStyleInitializerArgument }}...{{ $type.GetElement }}{{ else }}{{ $type.GetApparentType }}{{ end }}) *{{ $builderName }} {
{{- $setFieldMethod := $.MethodName "builder.method.SetField" }}
  return b.{{ $setFieldMethod }}({{ $field.GetKeyName $ }}, in)
}
{{- end }}

{{- if $.GenerateMethod "builder.method.SetField" }}
{{- $setFieldMethod := $.MethodName "builder.method.SetField" }}
// {{ $setFieldMethod }} sets the value of any field. The name should be the JSON field name.
// Type check will only be performed for pre-defined types
func (b *{{ $builderName }}) {{ $setFieldMethod }}(name string, value interface{}) *Builder {
  b.mu.Lock()
  defer b.mu.Unlock()

  b.once.Do(b.initialize)
  if b.err != nil {
    return b
  }

  if err := b.object.Set(name, value); err != nil {
    b.err = err
  }
  return b
}
{{- end }}

{{- if $.GenerateMethod "builder.method.Build" }}
func (b *{{ $builderName }}) Build() ({{ .BuilderResultType }}, error) {
  b.mu.Lock()
  defer b.mu.Unlock()

  b.once.Do(b.initialize)
  if b.err != nil {
    return nil, b.err
  }
{{- range $i, $field := .Fields }}
  {{- if $field.GetRequired }}
  if b.object.{{ $field.GetUnexportedName }} == nil {
    return nil, fmt.Errorf("required field '{{ $field.GetName }}' not initialized")
  }
  {{- end }}
{{- end }}
  obj := b.object
  b.once = sync.Once{}
  b.once.Do(b.initialize)
  return obj, nil
}
{{- /* end builder.method.Build */ -}}{{ end }}

{{- if $.GenerateMethod "builder.method.MustBuild" }}
func (b *{{ $builderName }}) MustBuild() {{ .BuilderResultType }} {
  object, err := b.Build()
  if err != nil {
    panic(err)
  }
  return object
}
{{- /* end builder.method.MustBuild */ -}}{{ end }}

{{- if hasTemplate "ext/builder/footer" }}
  {{- runTemplate "ext/builder/footer" $ }}
{{- end }}
{{ end }}
