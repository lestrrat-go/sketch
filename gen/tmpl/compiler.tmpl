{{ define "go.mod" }}
module local.path/sketch/compiler

require (
  github.com/lestrrat-go/codegen v1.0.4
  {{ .SrcModule }} {{ .SrcModuleVersion }}
)

replace (
  {{ .SrcModule }} => {{ .SrcModulePath }}
{{- if (and .DevPath (ne .DevPath "")) }}
  github.com/lestrrat-go/sketch => {{ .DevPath }}
{{ end }}
)
{{ end }}

{{ define "compiler.go" }}
package main

import (
  "bytes"
  "embed"
  "fmt"
  "path/filepath"
  "os"
  "sort"
  "text/template"

  src "{{ .SrcPkg }}"
  "github.com/lestrrat-go/sketch"
  "github.com/lestrrat-go/sketch/schema"
  "github.com/lestrrat-go/codegen"
)

//go:embed  tmpl/*
var content embed.FS

func main() {
  if err := _main(); err != nil {
    fmt.Fprintf(os.Stderr, "%s\n", err)
    os.Exit(1)
  }
}

func _main() error {
  if len(os.Args) < 2 {
    return fmt.Errorf(`Usage: sketch [output-dir]`)
  }

  outputDir := os.Args[1]
  defaultPkg := filepath.Base(outputDir)
  srcs := []struct {
    Filename string
    Name string
    Schema schema.Interface
  } {
{{- range $fn, $name := .Schemas }}
    {
      Filename: {{ $fn | printf "%q"}},
      Name: {{ $name | printf "%q" }},
      Schema: &src.{{ $name }}{
      	Base: schema.Base{
	  Variables: map[string]interface{}{
	    "DefaultGenerateBuilders": {{ $.GenerateBuilders }},
	    "DefaultGenerateHasMethods": {{ $.GenerateHasMethods }},
	    "DefaultKeyNamePrefix": {{ if $.WithKeyNamePrefix }}{{ $name | printf "%q" }}{{ else }}""{{ end }},
	    "DefaultName": {{ $name | printf "%q" }},
	    "DefaultPkg": defaultPkg,
            "DefaultBuilderName": {{ $name | printf "%sBuilder" | printf "%q" }},
            "DefaultBuilderResultType": {{ $name | printf "*%s" | printf "%q" }},
          },
	},
      },
    },
{{- end }}
  }

  var tt sketch.Template

  tt.AddFS("/system", content)
{{- range $i, $dir := .UserTemplateDirs }}
  tt.AddFS("/usr{{ $i }}", os.DirFS({{ $dir| printf "%q" }}))
{{- end }}

  tmpl, err := tt.Build()
  if err != nil {
    return fmt.Errorf(`failed to parse template: %w`, err)
  }

  if err := executeGoCodeTemplateToFile(tmpl, "object/common", filepath.Join(outputDir, "sketch_gen.go"), map[string]interface{}{ "Package": defaultPkg }); err != nil {
    return fmt.Errorf(`failed to render template %s: %w`, "object/common", err)
  }

  for _, src := range srcs {
    fields := src.Schema.Fields()
    sort.Slice(fields, func(i, j int) bool {
      return fields[i].GetName() < fields[j].GetName()
    })

    if err := executeGoCodeTemplateToFile(tmpl, "object", filepath.Join(outputDir, src.Filename), src.Schema); err != nil {
      return fmt.Errorf(`failed to render template %s: %w`, "object", err)
    }
  }
  return nil
}

func executeGoCodeTemplateToFile(tmpl *template.Template, name, fn string, vars interface{}) error {
  var buf bytes.Buffer

  if err := tmpl.ExecuteTemplate(&buf, name, vars); err != nil {
    return fmt.Errorf(`failed to execute template for %s: %w`, name, err)
  }

  if err := codegen.WriteFile(fn, &buf, codegen.WithFormatCode(true)); err != nil {
    if cfe, ok := err.(codegen.CodeFormatError); ok {
      fmt.Fprint(os.Stderr, cfe.Source())
    }
    return fmt.Errorf(`failed to write to %s: %w`, fn, err)
  }
  return nil
}

{{ end }}{{- /* end of "main.go" */ -}}
