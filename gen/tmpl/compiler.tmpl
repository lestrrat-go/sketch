{{ define "compiler/go.mod" }}
module local.path/sketch/compiler

require (
  github.com/lestrrat-go/codegen v1.0.4
  {{ .SrcModule }} {{ .SrcModuleVersion }}
)

replace (
  {{ .SrcModule }} => {{ .SrcModulePath }}
{{- if (and .DevPath (ne .DevPath "")) }}
  github.com/lestrrat-go/sketch => {{ .DevPath }}
{{ end }}
)
{{ end }}

{{ define "compiler/main.go" }}
package main

import (
  "bytes"
  "embed"
  "fmt"
  "path/filepath"
  "os"
  "regexp"
  "strings"
  "text/template"

  src "{{ .SrcPkg }}"
  "github.com/lestrrat-go/sketch"
  "github.com/lestrrat-go/sketch/schema"
  "github.com/lestrrat-go/codegen"
  "github.com/lestrrat-go/xstrings"
)

//go:embed  tmpl/*
var content embed.FS
var _ = regexp.Compile

func main() {
  if err := _main(); err != nil {
    fmt.Fprintf(os.Stderr, "%s\n", err)
    os.Exit(1)
  }
}

type Src struct {
  Name string
  FilenameBase string
  Schema schema.Interface
}

func _main() error {
  if len(os.Args) < 2 {
    return fmt.Errorf(`Usage: sketch [output-dir]`)
  }

  outputDir := os.Args[1]
  defaultPkg := filepath.Base(outputDir)
  srcs := make([]Src, {{ (len .Schemas) }})

  {{- /* Build the default rule set for .GenerateMethod */ -}}
{{ if .Excludes }}
  excludes := make([]*regexp.Regexp, {{ (len .Excludes) }})
{{- range $i, $pattern := .Excludes }}
  rx{{ $i }}, err := regexp.Compile({{ $pattern | printf "%q" }})
  if err != nil {
    return fmt.Errorf(`failed to compile pattern {{ $pattern | printf "%q" }}: %w`, err)
  }
  excludes[{{ $i }}] = rx{{ $i }}
{{ end }}
{{ end }}

{{- range $i, $schema := .Schemas }}
  {{- $varname := ($i | printf "s%d") }}
  {{ $varname }} := &src.{{ $schema.Name }}{
    Base: schema.Base{
      Variables: map[string]interface{}{
        "DefaultPkg": defaultPkg,
        "DefaultGenerateMethod": func(s string) bool {
{{ if $.Excludes }}
          for _, rx := range excludes {
	    if rx.MatchString(s) {
	      return false
	    }
	  }
{{ end }}
	  return true
	},
      },
    },
  }
  {{ $varname }}Name := {{ $varname }}.Name()
  if {{ $varname }}Name == "" {
    {{ $varname }}Name = {{ $schema.Name | printf "%q" }}
  }
  {{ $varname }}.Base.Variables["DefaultName"] = {{ $varname }}Name
  {{ $varname }}.Base.Variables["DefaultBuilderName"] = {{ $varname }}Name + "Builder"
  {{ $varname }}.Base.Variables["DefaultBuilderResultType"] = "*" + {{ $varname }}Name
  {{ $varname }}.Base.Variables["DefaultCloneResultType"] = "*" + {{ $varname }}Name
  {{- if $.WithKeyNamePrefix }}
  {{ $varname }}.Base.Variables["DefaultKeyNamePrefix"] = {{ $varname }}Name
  {{- end }}
  srcs[{{ $i }}] = Src{
    Schema: {{ $varname }},
    FilenameBase: {{ $varname }}.FilenameBase(),
    Name: {{ $schema.Name | printf "%q" }}, {{- /* This is deliberately set to $schema.Name */ -}}
  }
{{- end }}

  var tt sketch.Template

  tt.AddFS("/system", content)
{{- range $i, $dir := .UserTemplateDirs }}
  tt.AddFS("/usr{{ $i }}", os.DirFS({{ $dir| printf "%q" }}))
{{- end }}

  tmpl, err := tt.Build()
  if err != nil {
    return fmt.Errorf(`failed to parse template: %w`, err)
  }

  execFileTemplate := func(tmpl *template.Template, tmplname, filename string, vars interface{}) error {
    filename = filepath.Join(outputDir, filename)

    base := filepath.Base(filename)
    if i := strings.LastIndex(base, "."); i > 0 {
      filename = filepath.Join(filepath.Dir(filename), base[:i]+`_gen`+base[i:])
    } else {
      filename = filename + `_gen`
    }
{{- if .Verbose }}
    fmt.Fprintf(os.Stdout, "ðŸ‘‰ Generating file %s\n", filename)
{{- end }}
    return executeGoCodeTemplateToFile(tmpl, tmplname, filename, vars)
  }

  for _, tt := range tmpl.Templates() {
    switch {
    case strings.HasPrefix(tt.Name(), `files/per-object/`):
      for _, src := range srcs {
        name := strings.TrimPrefix(tt.Name(), `files/per-object/`)
        // we prepend the name of this object to the remaining `name`, EXCEPT
        // when the name is `object.go`, which is special.
        if name == `object.go` {
	  base := src.FilenameBase
	  if base == "" {
	    base = xstrings.Snake(src.Name) 
	  }
          name = base + `.go`
        } else {
	  // default case would be prepend the object name
	  // so foo/bar/baz.go would be rendered as foo/bar/object_name_baz.go (and then changed to xxx_gen.go)
	  name = filepath.FromSlash(name)
	  name = filepath.Join(filepath.Dir(name), xstrings.Snake(src.Name) + filepath.Base(name))
        }
        
        if err := execFileTemplate(tmpl, tt.Name(), name, src.Schema); err != nil {
          return fmt.Errorf(`failed to execute template for object %q: %w`, src.Name, err)
	}
      }
    case strings.HasPrefix(tt.Name(), `files/per-run/`):
      schemas := make([]schema.Interface, len(srcs))
      for i, src := range srcs {
        schemas[i] = src.Schema
      }
      name := filepath.FromSlash(strings.TrimPrefix(tt.Name(), `files/per-run/`))
      if err := execFileTemplate(tmpl, tt.Name(), name, map[string]interface{}{ "Package": defaultPkg, "Schemas": schemas }); err != nil {
        return fmt.Errorf(`failed to execute templae for %q: %w`, name, err)
      }
    }
  }
  return nil
}

func executeGoCodeTemplateToFile(tmpl *template.Template, name, fn string, vars interface{}) error {
  var buf bytes.Buffer

  if err := tmpl.ExecuteTemplate(&buf, name, vars); err != nil {
    return fmt.Errorf(`failed to execute template for %s: %w`, name, err)
  }

  if err := codegen.WriteFile(fn, &buf, codegen.WithFormatCode(true)); err != nil {
    if cfe, ok := err.(codegen.CodeFormatError); ok {
      fmt.Fprint(os.Stderr, cfe.Source())
    }
    return fmt.Errorf(`failed to write to %s: %w`, fn, err)
  }
  return nil
}

{{ end }}{{- /* end of "main.go" */ -}}
